[
    {"vocabulary": "FRONT END = describes all the parts of a website that can be seen and interacted with by users."},    
    {"vocabulary": "HTML5 = is the latest version of HTML."}, 
        {"vocabulary": "ELEMENTS = are individual HTML components of document or webpage"}, 
        {"vocabulary": "ATTRIBUTES = are used to provide additional information about HTML elements."}, 
        {"vocabulary": "OPENING TAG AND CLOSING TAGS = are sets of angle brackets with an HTML element character(s) that contains a piece of content or part of the structure for a web page"}, 
        {"vocabulary": "SELF-CLOSING TAG = are opening tags that don't have a corresponding closing tag but instead close them selves with a forward slash before the right angel bracket."}, 
        {"vocabulary": "CSS(CASCADING STYLE SHEETS)= is the language used to add style to documents created with HTML."}, 
        {"vocabulary": "Variables =  Containers for storing values"}, 
        {"vocabulary": "Syntax Error = produced when a scripts format or shape is incorrect, a misspelling is found, or text is not recognized."}, 
        {"vocabulary": "Object = something that exists like an HTML document, browser window, or the date and time"}, 
        {"vocabulary": "Instance = contained in () immediately after a command. Contains information about what an object is to do or how to be carried out"}, 
        {"vocabulary": "Method command = that tells how an object is to be acted upon"}, 
        {"vocabulary": "Document object = name that refers to the HTML document that contains the JavaScript."}, 
        {"vocabulary": "Write method = that acts upon the object document to post text to a page"}, 
        {"vocabulary": "Function = user-defined or built-in set of statements that perform a task. Can also return a value when used as a return statement."}, 
        {"vocabulary": "Event Handler = attributes of HTML tags embedded in documents. Assigns a JavaScript command or function to execute."}, 
        {"vocabulary": "Property = Used to describe an object. There are several properties that never change"}, 
        {"vocabulary": "Array = an alternative, easier, and more flexible way to define variables"}, 
        {"vocabulary": "If = Statement it simply states that if this condition is true, do this, else do something else."}, 
        {"vocabulary": "Else = a fallback to an if statement"}, 
        {"vocabulary": "JavaScript = a scripting language developed by Netscape for HTML documents. Scripts are performed after specific user-triggered events. Creating JavaScript Web documents requires a text editor and compatible browser."}, 
        {"vocabulary": "Operator performs = a function on one or more operands or variables. Operators are divided into two classes: binary and unary."}, 
        {"vocabulary": "Binary operators = need two operands, and unary operands can operate on a single operand. For example, addition is a binary operand: sum = 1+1"}, 
        {"vocabulary": "Unary operands = are often used to update counters. The following example increases the variable by 1: counter++"}, 
        {"vocabulary": "Button = an object that is a form element and must be defined within a <form> tag and can be used to perform an action."}, 
        {"vocabulary": "Form a property = of the document object. Each form in a document is a separate and distinct object that can be referenced using the form object."}, 
        {"vocabulary": "Math = includes properties for mathematical constants and methods for functions."}, 
        {"vocabulary": "String = a series of characters defined by double or single quotes."}, 
        {"vocabulary": "Alert = displays a JavaScript alert dialog box with an OK button and a user-defined message. Before the user can continue, they must press the OK button."}, 
        {"vocabulary": "Scope = tells us where a piece of data is accessible. There are two kinds of scope: global and local."}, 
        {"vocabulary": "Global scope = a variable with Global scope can be accessed from anywhere in our program."}, 
        {"vocabulary": "Local scope = a variable created inside of a function has Local scope. It can only be accessed from inside the function it was created in."}, 
        {"vocabulary": "While loops = check whether a condition is true and then perform a task as long as the condition is true."}, 
        {"vocabulary": "Value properties = these global properties return a simple value; they have not properties or methods ex. Infinity, NaN, undefined, null literal."}, 
        {"vocabulary": "NaN = the global NaN property is a value representing Not-A-Number."}, 
        {"vocabulary": "Block = is a statement that is  used to group zero or more statements. The block is delimited by a pair of curl brackets."}, 
        {"vocabulary": "Break terminates = the current loop, switch, or label statement and transfers program control to the statement following the terminated statement."}, 
        {"vocabulary": "Continue terminates = execution of the statements in the current iteration of the current or labeled loop and continues execution of the loop with the next iteration."}, 
        {"vocabulary": "var declaration = declares a variable, optionally initializing it to a value."}, 
        {"vocabulary": "let declaration = declares a block scope local variable, optionally initializing it to a value."}, 
        {"vocabulary": "const declaration = declares a read-only named constant."}, 
        {"vocabulary": "Return = specifies the value to be returned by a function."}, 
        {"vocabulary": "Class = declares a class"}, 
        {"vocabulary": "While = creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement."}, 
        {"vocabulary": "do...while = creates a loop that executes a specified statement until the test condition evaluates to false.The condition is evaluated after executing the statement, resulting in the specified statement executing at least once."}, 
        {"vocabulary": "for = crates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement executed in the loop."}, 
        {"vocabulary": "this = keyword refers to a special property of an execution context."}, 
        {"vocabulary": " "}, 
        {"vocabulary": "Comma operator = the comma operator allows multiple expressions to be evaluated in a single statement and returns the result of the last expression."}, 
        {"vocabulary": " Arrow functions = expression has a shorter syntax than a function expression and does not have its own this,arguments, super, or new target. These function expressions are best suited for non-method functions, and they cannot be used as constructors."}, 
        {"vocabulary": "React = is a declarative, efficient, and flexible JavaScript library for building user interfaces."}, 
        {"vocabulary": "Functional components = react supports a simpler syntax called functional components for component types like Square that only consist of a render method."}, 
        {"vocabulary": "JSX = is a syntax extension to JavaScript. It is similar to a template language, but it has full power of JavaScript. JSX gets compiled to React.createElement() calls which return plain JavaScript objects called 'React elements'."}, 
        {"vocabulary": "React elements = are the building blocks of React applications. One might confuse elements with a more widely known concept of 'components'. An element describes what you want to see on the screen. React elements are immutable. Typically, elements are not used directly, but get returned from components."}, 
        {"vocabulary": "React components = are small, reusable pieces of code that return a React element to be rendered to the page.The simplest version of React component is a plain JavaScript function that returns a React element:"}, 
        {"vocabulary": "Props = are inputs to a React component. They are data passed down from a parent component to a child component. Remember that props are read only. They should not be modified in any way:"}, 
        {"vocabulary": "A 'key' = is a special string attribute you need to include when creating arrays of elements. Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside an array to give the elements a stable identity."}, 
        {"vocabulary": "MongoDB = stores data in flexible, JSON-like documents, meaning fields can vary from document to document and data structure can be changed over time."}, 
        {"vocabulary": "Representational State Transfer (REST) = is an architectural style that defines a set of constraints and properties based on HTTP. Web Services that conform to the REST architectural style, or RESTful web services, provide interoperability between computer systems on the Internet."}, 
        {"vocabulary": "GraphQL = is a query language for APIs and a runtime for fulfilling those queries with your existing data."
}
]